#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{xpatch}
\xpretocmd{\part}{\setcounter{section}{0}}{}{}

\usepackage{sectsty}

\sectionfont{\fontsize{12}{15}\selectfont}


\usepackage{color}
\definecolor{gray97}{gray}{.97}
\definecolor{gray75}{gray}{.75}
\definecolor{gray45}{gray}{.45}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\usepackage[outputdir=".tmp"]{minted}
 
 
\usepackage{listings}
\lstset{
     frame=Ltb,
     framerule=0pt,
     aboveskip=0.5cm,
     framextopmargin=3pt,
     framexbottommargin=3pt,
     framexleftmargin=0.3cm,
     framesep=0pt,
     rulesep=.4pt,
     backgroundcolor=\color{gray97},
     rulesepcolor=\color{black},
     %
     showstringspaces = false,
     basicstyle=\footnotesize,           % the size of the fonts that are used for the code
     %basicstyle=\ttm
     commentstyle=\color{gray75},       % comment style
     stringstyle=\color{dkgreen},         % string literal style
     keywordstyle=\color{blue},     
     %
     numbers=left,
     numbersep=15pt,
     numberstyle=\tiny,
     numberfirstline = false,
     %
     breaklines=true,
     tabsize=2,
     literate={á}{{\'a}}1 {é}{{\'e}}1 {í}{{\'\i}}1 {ó}{{\'o}}1 {ú}{{\'u}}1 {Á}{{\'A}}1 {É}{{\'E}}1 {Í}{{\'I}}1 {Ó}{{\'O}}1 {Ú}{{\'U}}1 {ü}{{\"u}}1 {Ü}{{\"U}}1 {ñ}{{\~n}}1 {Ñ}{{\~N}}1 {¿}{{?``}}1 {¡}{{!``}}1
   }
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Counter section
        Within               part*
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Práctica 0
\end_layout

\begin_layout Author
Antonio Álvarez Caballero
\end_layout

\begin_layout Part*
Cuestiones
\end_layout

\begin_layout Section
¿Qué relación hay en OpenCV entre imágenes y matrices? Justificar la respuesta.
\end_layout

\begin_layout Standard
OpenCV (y la mayoría de software por no decir todo) utilizan matrices como
 estructura de datos para almacenar imágenes.
 Esto lo consiguen asignando cada píxel a una posición de la matriz, y en
 ella un vector de 1, 3 o 4 valores dependiendo del número de canales de
 la imagen.
 
\end_layout

\begin_layout Section
Diga el significado de los siguientes tipos OpenCV: 8UC1, 8UC2, 8UC3, 32SC1,
 32SC2, 32SC3, 32FC1, 32FC2, 32FC3.
 ¿Cuáles de ellos están asociados a imágenes? Justificar la respuesta.
 
\end_layout

\begin_layout Standard
El primer dígito indica los bits que ocupa cada píxel.
 La primera letra indica el tipo.
 
\emph on
U
\emph default
 de unsigned char, 
\emph on
S
\emph default
 de signed int y 
\emph on
F
\emph default
 de float (podría ser un double).
 Y por último 
\emph on
Cx
\emph default
 indica el número de canales de la imagen.
\end_layout

\begin_layout Standard
Asociados a imágenes son todos excepto los que tienen 2 canales.
 No hay tipos de imagen con 2 canales y por tanto OpenCV no puede mostrarlos.
 Los demás los muestra OpenCV sin problema.
\end_layout

\begin_layout Section
¿Qué relación existe entre cada tipo visual de una imagen: (color, grises,
 blanco y negro) y los tipos de almacenamiento de OpenCV ? Justificar la
 respuesta.
\end_layout

\begin_layout Standard
El primer número, el de bits que contiene cada píxel, se utiliza para el
 número de colores que puede albergar.
 A más cantidad de píxels mayor variedad de información podremos albergar
 en nuestra imagen.
\end_layout

\begin_layout Standard
El número de canales nos permite guardar más información para cada píxel:
 si usamos un solo canal, sólo podremos albergar imágenes en blanco y negro
 o en escala de grises.
 En cambio, utilizando tres canales podremos albergar imágenes RGB o HSV
 entre otras.
 Si utilizáramos 4 podríamos usar el canal 
\emph on
alpha
\emph default
 para la transparencia.
\end_layout

\begin_layout Section
¿Es posible realizar operaciones entre imágenes de distinto tipo visual?
 Justificar la respuesta.
\end_layout

\begin_layout Standard
No, ya que no podemos realizar operaciones con matrices de distinto tamaño
 a no ser que las transformemos antes.
\end_layout

\begin_layout Section
¿Cuál es la orden OpenCV que permite transformar el tipo de almacenamiento
 de una matriz en otro distinto? 
\end_layout

\begin_layout Standard
La orden buscada es 
\emph on
void convertTo(OutputArray img, int rtype, double alpha = 1, double beta
 = 0)
\emph default
.
 Es un método de la clase Mat para convertir al tipo 
\emph on
rtype
\emph default
 y guardar en 
\emph on
img
\emph default
.
 
\emph on
alpha 
\emph default
es un parámetro de escala opcional y 
\emph on
beta
\emph default
 de traslación.
\end_layout

\begin_layout Section
¿Cuál es la orden OpenCV que permite transformar el tipo visual de una imagen
 en otro distinto? ¿Por qué es distinta de la que transforma un tipo de
 almacenamiento en otro? 
\end_layout

\begin_layout Standard
La función buscada es 
\emph on
void cvtColor(inputArray src, OutputArray Dst, int code, int dstCn = 0)
 
\emph default
.
 Transforma la imagen 
\emph on
src
\emph default
 en 
\emph on
dst
\emph default
 al tipo visual 
\emph on
code
\emph default
.
 El parámetro 
\emph on
dstCn
\emph default
 es el número de canales de la nueva imagen, que si es 0 se calculará automática
mente.
\end_layout

\begin_layout Standard
Estas funciones son distintas ya que, aún teniendo la misma cantidad de
 información, dos imágenes con tipo visual RBG y HSV no son iguales.
 Almacenan la misma cantidad de información pero su codificación interna
 es distinta: en una son valores de Rojo, Azul y Verde y en la otra Tono,
 Saturación y Valor.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part*
Ejercicios
\end_layout

\begin_layout Section
Escribir una función que lea una imagen en niveles de gris o en color (
 im=leeimagen(filename, flagColor)) 
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Sources/Ejercicio1.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Section
Escribir una función que visualice una imagen (pintaI(im)) 
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Sources/Ejercicio2.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Section
Escribir una función que visualice varias imágenes a la vez: pintaMI(vim).
 (vim será una secuencia de imágenes) ¿Qué pasa si las imágenes no son todas
 del mismo tipo: (nivel de gris, color, blanco-negro)? 
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Sources/Ejercicio3.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Section
Escribir una función que modifique el valor en una imagen de una lista de
 coordenadas de píxeles.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Sources/Ejercicio4.py"
lstparams "language=Python"

\end_inset


\end_layout

\end_body
\end_document
